// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class ImportLayoutReducer extends Reducer
{
	public static reducerName: string = "ImportLayout";
	public static call(_id: number, _name: string, _createdBy: string, _active: boolean) {
		this.getReducer().call(_id, _name, _createdBy, _active);
	}

	public call(_id: number, _name: string, _createdBy: string, _active: boolean) {
		const serializer = this.client.getSerializer();
		let _idType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U32);
		serializer.write(_idType, _id);
		let _nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		serializer.write(_nameType, _name);
		let _createdByType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		serializer.write(_createdByType, _createdBy);
		let _activeType = AlgebraicType.createPrimitiveType(BuiltinType.Type.Bool);
		serializer.write(_activeType, _active);
		this.client.call("ImportLayout", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let idType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U32);
		let idValue = AlgebraicValue.deserialize(idType, adapter.next())
		let id = idValue.asNumber();
		let nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		let nameValue = AlgebraicValue.deserialize(nameType, adapter.next())
		let name = nameValue.asString();
		let createdByType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		let createdByValue = AlgebraicValue.deserialize(createdByType, adapter.next())
		let createdBy = createdByValue.asString();
		let activeType = AlgebraicType.createPrimitiveType(BuiltinType.Type.Bool);
		let activeValue = AlgebraicValue.deserialize(activeType, adapter.next())
		let active = activeValue.asBoolean();
		return [id, name, createdBy, active];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _id: number, _name: string, _createdBy: string, _active: boolean) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _id: number, _name: string, _createdBy: string, _active: boolean) => void)
	{
		this.client.on("reducer:ImportLayout", callback);
	}
}


export default ImportLayoutReducer

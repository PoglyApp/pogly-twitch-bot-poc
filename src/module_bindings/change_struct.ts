// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, SumTypeVariant, BuiltinType, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { ElementDataChange as __ElementDataChange } from "./element_data_change";
// @ts-ignore
import { ElementChange as __ElementChange } from "./element_change";
// @ts-ignore
import { GuestChange as __GuestChange } from "./guest_change";
// @ts-ignore
import { EmptyChange as __EmptyChange } from "./empty_change";
// @ts-ignore
import { ChatMessage as __ChatMessage } from "./chat_message";

export namespace ChangeStruct {
	export function getAlgebraicType(): AlgebraicType {
		return AlgebraicType.createSumType([
			new SumTypeVariant("ElementDataChange", __ElementDataChange.getAlgebraicType()),
			new SumTypeVariant("ElementChange", __ElementChange.getAlgebraicType()),
			new SumTypeVariant("GuestChange", __GuestChange.getAlgebraicType()),
			new SumTypeVariant("EmptyChange", __EmptyChange.getAlgebraicType()),
			new SumTypeVariant("ChatMessage", __ChatMessage.getAlgebraicType()),
		]);
	}

	export function serialize(value: ChangeStruct): object {
		switch(value.tag) {
			case "ElementDataChange":
				return { "ElementDataChange": __ElementDataChange.serialize(value.value) };
			case "ElementChange":
				return { "ElementChange": __ElementChange.serialize(value.value) };
			case "GuestChange":
				return { "GuestChange": __GuestChange.serialize(value.value) };
			case "EmptyChange":
				return { "EmptyChange": __EmptyChange.serialize(value.value) };
			case "ChatMessage":
				return { "ChatMessage": __ChatMessage.serialize(value.value) };
			default:
				throw("unreachable");
		}
	}

	export type ElementDataChange = { tag: "ElementDataChange", value: __ElementDataChange };
	export const ElementDataChange = (value: __ElementDataChange): ElementDataChange => ({ tag: "ElementDataChange", value });
	export type ElementChange = { tag: "ElementChange", value: __ElementChange };
	export const ElementChange = (value: __ElementChange): ElementChange => ({ tag: "ElementChange", value });
	export type GuestChange = { tag: "GuestChange", value: __GuestChange };
	export const GuestChange = (value: __GuestChange): GuestChange => ({ tag: "GuestChange", value });
	export type EmptyChange = { tag: "EmptyChange", value: __EmptyChange };
	export const EmptyChange = (value: __EmptyChange): EmptyChange => ({ tag: "EmptyChange", value });
	export type ChatMessage = { tag: "ChatMessage", value: __ChatMessage };
	export const ChatMessage = (value: __ChatMessage): ChatMessage => ({ tag: "ChatMessage", value });

	export function fromValue(value: AlgebraicValue): ChangeStruct {
		let sumValue = value.asSumValue();
		switch(sumValue.tag) {
			case 0:
				return { tag: "ElementDataChange", value: __ElementDataChange.fromValue(sumValue.value) };
			case 1:
				return { tag: "ElementChange", value: __ElementChange.fromValue(sumValue.value) };
			case 2:
				return { tag: "GuestChange", value: __GuestChange.fromValue(sumValue.value) };
			case 3:
				return { tag: "EmptyChange", value: __EmptyChange.fromValue(sumValue.value) };
			case 4:
				return { tag: "ChatMessage", value: __ChatMessage.fromValue(sumValue.value) };
			default:
				throw("unreachable");
		}
	}
}

export type ChangeStruct = ChangeStruct.ElementDataChange | ChangeStruct.ElementChange | ChangeStruct.GuestChange | ChangeStruct.EmptyChange | ChangeStruct.ChatMessage;
export default ChangeStruct;

// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class AuthenticationKey extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "AuthenticationKey";
	public version: number;
	public key: string;

	public static primaryKey: string | undefined = "version";

	constructor(version: number, key: string) {
	super();
		this.version = version;
		this.key = key;
	}

	public static serialize(value: AuthenticationKey): object {
		return [
		value.version, value.key
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("version", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("key", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): AuthenticationKey
	{
		let productValue = value.asProductValue();
		let __Version = productValue.elements[0].asNumber();
		let __Key = productValue.elements[1].asString();
		return new this(__Version, __Key);
	}

	public static *filterByVersion(value: number): IterableIterator<AuthenticationKey>
	{
		for (let instance of this.db.getTable("_AuthenticationKey").getInstances())
		{
			if (instance.version === value) {
				yield instance;
			}
		}
	}

	public static findByVersion(value: number): AuthenticationKey | undefined
	{
		return this.filterByVersion(value).next().value;
	}

	public static *filterByKey(value: string): IterableIterator<AuthenticationKey>
	{
		for (let instance of this.db.getTable("_AuthenticationKey").getInstances())
		{
			if (instance.key === value) {
				yield instance;
			}
		}
	}


}

export default AuthenticationKey;
